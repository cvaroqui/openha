#!/bin/sh
#
# chkconfig: 2345 99 01
# description: OpenHA daemons
# processname: nmond

### BEGIN INIT INFO
# Provides: openha
# Required-Start: $all
# Should-Start: 
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: OpenHA daemons
# Description: OpenHA daemons - Maintained by OpenSVC
### END INIT INFO
#
# starts / stops everything.
#
# CHANGES (br)
#	* Removed OS/platform dependancies.
#	* Cleanup.
#
# TODO (br)
#	* No need for nohup. Should be handled by daemons (if they are).
#	* Maybe a /var/run/something instead of pkill (not portable)? (not sure).
#	* Start does a forced-stop first. Should be a check instead: Status to be
#	  added to avoid this.
#	* Remove "sleep x". If this does depends on time, it does not work.
#	  -> one day, we will semaphore for this stuff (sam)
#
EZ_BIN=/usr/lib/openha/bin
EZ_VAR=/var/lib/openha
EZ_LOG=/var/log/openha
EZ_CONF=/etc/openha
EZ_SERVICES=$EZ_CONF/services
EZ_NODES=$EZ_CONF/nodes
EZ_MONITOR=$EZ_CONF/monitor

export EZ_BIN EZ_VAR EZ_SERVICES EZ_NODES EZ_MONITOR

HEARTBEAT_TALK_DELAY_ON_START=2

#
# Defaults sourcing provides:
#  FREEZE_SERVICE_SECONDARY_INSTANCE_ON_START
#  HEARTBEAT_TALK_DELAY_ON_START
#  non-standard install paths
#
if test -f "/etc/defaults/openha"
then
        # FreeBSD, Darwin
        . "/etc/defaults/openha"
elif test -f "/etc/default/openha"
then
        # Debian-like, Tru64, SunOS and HP-UX
        . "/etc/default/openha"
elif test -f "/etc/sysconfig/openha"
then
        # Red Hat-like
        . "/etc/sysconfig/openha"
elif test -f "/etc/rc.config.d/openha"
then
        # AIX
        . "/etc/rc.config.d/openha"
fi

NODE=`uname -n`
FROZEN_STOP=6

[ ! -f $EZ_NODES -o ! -f $EZ_MONITOR ] && exit 1


LOG_FACILITY=""
if [ -f $EZ_CONF/logfacility ]
then
	LOG_FACILITY=`cat $EZ_CONF/logfacility `
fi
[ -z "$LOG_FACILITY" ] && LOG_FACILITY="daemon"

case "$1" in
'start')
	if [ -f $EZ_SERVICES ]
	then
		cat $EZ_SERVICES | while read SERVICE SVCPATH PRIMARY DUMMY
		do
			[ "$FREEZE_SERVICE_SECONDARY_INSTANCE_ON_START" = "yes" ] && \
			[ "$NODE" != "$PRIMARY" ] && {
				echo "set local secondary instance of service $SERVICE in FROZEN_STOP state"
				logger -p $LOG_FACILITY.debug -t openha "set local secondary instance of service $SERVICE in FROZEN_STOP state"
				echo $FROZEN_STOP >$EZ_VAR/services/$SERVICE/STATE.$NODE
			}
			[ -r $EZ_VAR/services/$SERVICE/STATE.$NODE ] && {
				STATE=`cat $EZ_VAR/services/$SERVICE/STATE.$NODE`
			} || {
				STATE=
			}
			[ "$STATE" != "$FROZEN_STOP" ] && $EZ_BIN/service -A "$SERVICE" force-stop
		done
	fi
	echo "Starting OpenHA heartbeat process" > /dev/console
	if [ -f $EZ_MONITOR ] ; then
		cat $EZ_MONITOR |
		while read HOST TYPE ARG1 ARG2 ARG3 ARG4 DUMMY
		do
			if [ $HOST = `uname -n` ]
			then
				case "$TYPE" in
				net)
					$EZ_BIN/heartd $ARG1 $ARG2 $ARG3
					;;
				unicast)
					$EZ_BIN/heartd_unicast $ARG1 $ARG2 $ARG3
					;;
				disk)
					$EZ_BIN/heartd_raw $ARG1 $ARG2
					;;
				dio)
					$EZ_BIN/heartd_dio $ARG1 $ARG2
					;;
				*)
					echo "Oooops. What is $TYPE? Ignoring."
					;;
				esac
			else
				case "$TYPE" in
				net)
					$EZ_BIN/heartc $ARG1 $ARG2 $ARG3 $ARG4
					;;
				unicast)
					$EZ_BIN/heartc_unicast $ARG1 $ARG2 $ARG3 $ARG4
					;;
				disk)
					$EZ_BIN/heartc_raw $ARG1 $ARG2 $ARG3
					;;
				dio)
					$EZ_BIN/heartc_dio $ARG1 $ARG2 $ARG3
					;;
				*)
					echo "Oooops. What is $TYPE? Ignoring."
					;;
				esac
			
			fi
		done
	fi
	# let's the heart process talk a bit ...
	echo "waiting $HEARTBEAT_TALK_DELAY_ON_START seconds for heartbeat to converge"
	logger -p $LOG_FACILITY.debug -t openha "waiting $HEARTBEAT_TALK_DELAY_ON_START seconds for heartbeat to converge"
	sleep $HEARTBEAT_TALK_DELAY_ON_START
	$EZ_BIN/nmond >/dev/null 2>&1

;;
'stop')
	echo "Stopping OpenHA node monitor" > /dev/console
	pkill nmond 
	echo "Stopping services if started" > /dev/console
	$EZ_BIN/service -A stop
	echo "Stopping OpenHA heartbeat" > /dev/console
	pkill -f $EZ_BIN/heartc 
	pkill -f $EZ_BIN/heartd 
	pkill -f $EZ_BIN/heartc_unicast
	pkill -f $EZ_BIN/heartd_unicast
	pkill -f $EZ_BIN/heartc_raw 
	pkill -f $EZ_BIN/heartd_raw 
	pkill -f $EZ_BIN/heartc_dio 
	pkill -f $EZ_BIN/heartd_dio 

;;
'kill')
	echo "Killing OpenHA daemons"
	pkill -f $EZ_BIN/nmond
	pkill -f $EZ_BIN/heartc 
	pkill -f $EZ_BIN/heartd 
	pkill -f $EZ_BIN/heartc_unicast
	pkill -f $EZ_BIN/heartd_unicast
	pkill -f $EZ_BIN/heartc_raw 
	pkill -f $EZ_BIN/heartd_raw 
	pkill -f $EZ_BIN/heartc_dio 
	pkill -f $EZ_BIN/heartd_dio 

;;
'restart')
	echo "Stopping OpenHA daemons"
	pkill -f $EZ_BIN/nmond
	pkill -f $EZ_BIN/heartc
	pkill -f $EZ_BIN/heartd
	pkill -f $EZ_BIN/heartc_unicast
	pkill -f $EZ_BIN/heartd_unicast
	pkill -f $EZ_BIN/heartc_raw
	pkill -f $EZ_BIN/heartd_raw
	pkill -f $EZ_BIN/heartc_dio 
	pkill -f $EZ_BIN/heartd_dio 
	sleep 5
	echo "Starting OpenHA daemons"
	if [ -f $EZ_MONITOR ] ; then
		cat $EZ_MONITOR |
		while read HOST TYPE ARG1 ARG2 ARG3 ARG4 DUMMY
		do
			if [ $HOST = `uname -n` ]
			then
				case "$TYPE" in
				net)
					$EZ_BIN/heartd $ARG1 $ARG2 $ARG3
					;;
				unicast)
					$EZ_BIN/heartd_unicast $ARG1 $ARG2 $ARG3
					;;
				disk)
					$EZ_BIN/heartd_raw $ARG1 $ARG2
					;;
				dio)
					$EZ_BIN/heartd_dio $ARG1 $ARG2
					;;
				*)
					echo "Oooops. What is $TYPE? Ignoring."
					;;
				esac
			else
				case "$TYPE" in
				net)
					$EZ_BIN/heartc $ARG1 $ARG2 $ARG3 $ARG4
					;;
				unicast)
					$EZ_BIN/heartc_unicast $ARG1 $ARG2 $ARG3 $ARG4
					;;
				disk)
					$EZ_BIN/heartc_raw $ARG1 $ARG2 $ARG3
					;;
				dio)
					$EZ_BIN/heartc_dio $ARG1 $ARG2 $ARG3
					;;
				*)
					echo "Oooops. What is $TYPE? Ignoring."
					;;
				esac
			
			fi
		done
	        echo "waiting $HEARTBEAT_TALK_DELAY_ON_START seconds for heartbeat to converge"
	        logger -p $LOG_FACILITY.debug -t openha "waiting $HEARTBEAT_TALK_DELAY_ON_START seconds for heartbeat to converge"
		sleep $HEARTBEAT_TALK_DELAY_ON_START
		$EZ_BIN/nmond >> $EZ_LOG/nmond.log 2>&1 
	fi
	;;

	*)
		echo "Usage: $0 {start|stop|kill|restart}"
		exit 1
esac

exit 0

